import asyncio
from binance.client import Client
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import time

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_TOKEN = '8188731974:AAGBnpQ-w1gG36JJOA8V0CbVb1rzjqFvRQo'
CHAT_ID = '-1002315794441'
API_KEY = '4vihoWHQ4HTAZqOe1LqMeATfIWd14OCtW49tABC5RFxDLar7ojfh2mfLdZfKcYJe'
API_SECRET = 'HXd3WF6vKNgLFBIUOTTjkgvkawZyCPFhYKpfXPc8CLJkBF6PrxubRJM3OkIGkf5o'

COINGLASS_URL = 'https://www.coinglass.com/tv/ru/Binance_{symbol}'

bot = Bot(token=TELEGRAM_TOKEN)

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
previous_oi = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è OI
oi_start_time = {}  # –ß–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è OI –¥–ª—è —Å–∏–º–≤–æ–ª—É
signals_count = {}  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Binance
client = Client(API_KEY, API_SECRET)
# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
last_alert_time = {}

# –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ –¥–ª—è –æ–¥–Ω—ñ—î—ó –º–æ–Ω–µ—Ç–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MIN_ALERT_INTERVAL = 1200  # 15 —Ö–≤–∏–ª–∏–Ω

async def send_alerts(signal):
    """–ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram."""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –º–æ–Ω–µ—Ç–∏
    current_time = time.time()
    last_time = last_alert_time.get(signal['symbol'], 0)
    
    if current_time - last_time < MIN_ALERT_INTERVAL:
        return  # –Ø–∫—â–æ —á–∞—Å –º—ñ–∂ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ –º–µ–Ω—à–∏–π –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    last_alert_time[signal['symbol']] = current_time

    url = COINGLASS_URL.format(symbol=signal['symbol'])

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = (
    f"üìä *–°–∏–≥–Ω–∞–ª Binance ‚Äì 20 —Ö–≤–∏–ª–∏–Ω*\n"
    f"üîπ *–ú–æ–Ω–µ—Ç–∞*: `{signal['symbol']}`\n"
    f"üîπ *–¢–∏–ø —Å–∏–≥–Ω–∞–ª—É*: {signal['type']}\n"
    f"üîπ *–í—ñ–¥–∫—Ä–∏—Ç–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å (OI)*: +{signal['oi_change']}% "
    f"({signal['oi_value'] / 1_000_000:,.2f} –º–ª–Ω $)\n"  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—É–º–∏ –≤ –º—ñ–ª—å–π–æ–Ω–∞—Ö
    f"üîπ *–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏*: {signal['price_change']}%\n"
    f"üîπ *–û–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤*: {signal['volume'] / 1_000_000:,.2f} –º–ª–Ω $\n"
    f"üîπ *–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ –¥–æ–±—É*: {signal['signals_today']}\n\n"
)


    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é
    keyboard = [[InlineKeyboardButton("–î–µ—Ç–∞–ª—ñ", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await bot.send_message(chat_id=CHAT_ID, text=message, reply_markup=reply_markup, parse_mode="Markdown")

async def fetch_symbol_data(symbol):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ OI, –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ —Ç–∞ –æ–±—Å—è–≥–∏ –¥–ª—è —Å–∏–º–≤–æ–ª—É."""
    try:
        # –ó–∞–ø–∏—Ç OI
        oi_info = await asyncio.to_thread(client.futures_open_interest, symbol=symbol)
        current_oi = float(oi_info['openInterest'])

        # –ó–∞–ø–∏—Ç —Ü—ñ–Ω–∏ —Ç–∞ –æ–±—Å—è–≥—ñ–≤
        price_change, volume = await asyncio.to_thread(fetch_price_and_volume, symbol)

        return symbol, current_oi, price_change, volume
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol}: {e}")
        return symbol, None, None, None

def fetch_price_and_volume(symbol):
    """–û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ —Ç–∞ –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª—É."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        klines = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1MINUTE, limit=10)
        close_prices = [float(kline[4]) for kline in klines]  # –¶—ñ–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
        volumes = [float(kline[5]) for kline in klines]  # –û–±—Å—è–≥–∏ —Ç–æ—Ä–≥—ñ–≤

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–º—ñ–Ω —Ü—ñ–Ω–∏
        price_change = ((close_prices[-1] - close_prices[0]) / close_prices[0]) * 100

        # –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        total_volume = sum(volumes)

        return price_change, total_volume
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–Ω—É —Ç–∞ –æ–±—Å—è–≥ –¥–ª—è {symbol}: {e}")
        return 0, 0

def calculate_changes(symbol, current_oi, price_change, volume, interval=1200):
    """–û–±—á–∏—Å–ª—é—î–º–æ –∑–º—ñ–Ω–∏ OI, —Ü—ñ–Ω–∏ —Ç–∞ –æ–±—Å—è–≥—ñ–≤ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª—É."""
    global previous_oi, signals_count, oi_start_time
    signals = []

    current_time = time.time()

    # –Ø–∫—â–æ —â–µ –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è OI –¥–ª—è —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É
    if symbol not in oi_start_time or current_time - oi_start_time[symbol] > interval:
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è OI —Ç–∞ —á–∞—Å
        previous_oi[symbol] = current_oi
        oi_start_time[symbol] = current_time

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–º—ñ–Ω OI
    oi_change_percent = ((current_oi - previous_oi[symbol]) / previous_oi[symbol]) * 100

    # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–º–æ–≤ (OI, –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏, –æ–±—Å—è–≥–∏)
    if abs(oi_change_percent) >= 5:  # –ó–º—ñ–Ω–∞ OI –ø–æ–Ω–∞–¥ 5%
        if volume > 1_000_000:  # –í–∏—Å–æ–∫–∏–π –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤
            if oi_change_percent > 0:
                signal_type = "üîº –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π (—Ç—Ä–µ–Ω–¥ –ø–æ—Å–∏–ª—é—î—Ç—å—Å—è)"
            else:
                signal_type = "üîΩ –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π (—Ç—Ä–µ–Ω–¥ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è)"
        else:
            signal_type = "‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –æ–±—Å—è–≥ (–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Å–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª)"
        
        signals_count[symbol] = signals_count.get(symbol, 0) + 1
        signals.append({
            'symbol': symbol,
            'oi_change': round(oi_change_percent, 2),
            'oi_value': round(current_oi - previous_oi[symbol], 2),
            'price_change': round(price_change, 2),
            'volume': round(volume, 2),
            'signals_today': signals_count[symbol],
            'type': signal_type
        })

    return signals


def fetch_open_interest(symbols):
    """–û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å (OI) –¥–ª—è –∑–∞–¥–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤."""
    oi_data = {}
    for symbol in symbols:
        try:
            oi_info = client.futures_open_interest(symbol=symbol)
            oi_data[symbol] = float(oi_info['openInterest'])
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ OI –¥–ª—è {symbol}: {e}")
    return oi_data

async def get_all_symbols():
    """–û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä –Ω–∞ Binance."""
    exchange_info = client.futures_exchange_info()
    symbols = []
    for symbol_info in exchange_info['symbols']:
        if symbol_info['status'] == 'TRADING':  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥—É—î—Ç—å—Å—è
            symbols.append(symbol_info['symbol'])
    return symbols

async def monitor_open_interest():
    """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ OI —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤."""
    symbols = await get_all_symbols()
    while True:
        try:
            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            results = await asyncio.gather(*(fetch_symbol_data(symbol) for symbol in symbols))
            
            for symbol, current_oi, price_change, volume in results:
                if current_oi is None or price_change is None or volume is None:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–º–≤–æ–ª–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏

                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
                signals = calculate_changes(symbol, current_oi, price_change, volume)

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
                for signal in signals:
                    await send_alerts(signal)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        
        await asyncio.sleep(15)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É




async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."""
    await monitor_open_interest()

if __name__ == "__main__":
    asyncio.run(main())